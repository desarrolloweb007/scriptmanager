const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Muestra todos los comandos disponibles del bot')
        .addStringOption(option =>
            option.setName('comando')
                .setDescription('Comando espec√≠fico para ver informaci√≥n detallada')
                .setRequired(false)),

    async execute(interaction) {
        const specificCommand = interaction.options.getString('comando');
        
        if (specificCommand) {
            await this.showCommandHelp(interaction, specificCommand);
        } else {
            await this.showAllCommands(interaction);
        }
    },

    async showAllCommands(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle('ü§ñ Comandos del Bot de Roles')
            .setDescription('Aqu√≠ tienes todos los comandos disponibles organizados por categor√≠as.')
            .setThumbnail(interaction.client.user.displayAvatarURL({ dynamic: true }))
            .setTimestamp()
            .setFooter({ text: 'Usa /help <comando> para informaci√≥n detallada' });

        // Comandos de gesti√≥n de roles
        embed.addFields({
            name: 'üé≠ Gesti√≥n de Roles',
            value: [
                '`/rol` - Asigna un rol a un usuario',
                '`/removerol` - Remueve un rol de un usuario',
                '`/roles` - Lista todos los roles disponibles',
                '`/autorol` - Crea panel de autoasignaci√≥n'
            ].join('\n'),
            inline: false
        });

        // Comandos de utilidad
        embed.addFields({
            name: '‚öôÔ∏è Utilidad',
            value: [
                '`/help` - Muestra esta lista de comandos',
                '`/prefix` - Configura el prefijo del bot',
                '`/info` - Informaci√≥n del bot ScriptManager',
                '`/help <comando>` - Informaci√≥n detallada de un comando'
            ].join('\n'),
            inline: false
        });

        // Comandos legacy
        embed.addFields({
            name: 'üìù Comandos Legacy (con prefijo)',
            value: [
                '`!rol @usuario RolEjemplo` - Asigna rol',
                '`!removerol @usuario RolEjemplo` - Remueve rol',
                '`!roles` - Lista roles disponibles',
                '`!autorol "T√≠tulo" "Descripci√≥n" @rol1 @rol2` - Panel autoasignaci√≥n',
                '`!prefix [nuevo_prefijo]` - Configura prefijo',
                '`!help` - Muestra comandos',
                '`!info` - Informaci√≥n del bot'
            ].join('\n'),
            inline: false
        });

        // Informaci√≥n adicional
        embed.addFields({
            name: '‚ÑπÔ∏è Informaci√≥n',
            value: [
                '‚Ä¢ Los comandos slash requieren permisos espec√≠ficos',
                '‚Ä¢ Los comandos legacy funcionan con el prefijo configurado',
                '‚Ä¢ El sistema de autoasignaci√≥n usa botones interactivos',
                '‚Ä¢ Todos los comandos incluyen verificaciones de seguridad'
            ].join('\n'),
            inline: false
        });

        await interaction.reply({ embeds: [embed] });
    },

    async showCommandHelp(interaction, commandName) {
        const command = interaction.client.commands.get(commandName);
        
        if (!command) {
            return await interaction.reply({
                content: `‚ùå No se encontr√≥ el comando \`${commandName}\`.`,
                ephemeral: true
            });
        }

        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle(`üìñ Ayuda: /${commandName}`)
            .setTimestamp();

        // Informaci√≥n del comando
        if (command.data) {
            embed.setDescription(command.data.description || 'Sin descripci√≥n disponible.');
            
            // Opciones del comando
            if (command.data.options && command.data.options.length > 0) {
                const options = command.data.options.map(option => {
                    const required = option.required ? ' (Requerido)' : ' (Opcional)';
                    return `‚Ä¢ \`${option.name}\` - ${option.description}${required}`;
                }).join('\n');
                
                embed.addFields({
                    name: 'üîß Opciones',
                    value: options,
                    inline: false
                });
            }

            // Permisos requeridos
            if (command.data.default_member_permissions) {
                embed.addFields({
                    name: 'üîê Permisos Requeridos',
                    value: 'Gestionar Roles',
                    inline: true
                });
            }
        }

        // Ejemplos de uso
        const examples = this.getCommandExamples(commandName);
        if (examples) {
            embed.addFields({
                name: 'üí° Ejemplos de Uso',
                value: examples,
                inline: false
            });
        }

        // Informaci√≥n adicional
        const additionalInfo = this.getCommandAdditionalInfo(commandName);
        if (additionalInfo) {
            embed.addFields({
                name: '‚ÑπÔ∏è Informaci√≥n Adicional',
                value: additionalInfo,
                inline: false
            });
        }

        await interaction.reply({ embeds: [embed] });
    },

    getCommandExamples(commandName) {
        const examples = {
            'rol': [
                '`/rol usuario:@usuario rol:@RolEjemplo`',
                '`!rol @usuario RolEjemplo`'
            ],
            'removerol': [
                '`/removerol usuario:@usuario rol:@RolEjemplo`',
                '`!removerol @usuario RolEjemplo`'
            ],
            'roles': [
                '`/roles`',
                '`!roles`'
            ],
            'autorol': [
                '`/autorol titulo:"Roles de Juegos" descripcion:"Selecciona tus juegos favoritos" rol1:@Gamer rol2:@Streamer`',
                '`!autorol "Roles de Juegos" "Selecciona tus juegos favoritos" @Gamer @Streamer`'
            ],
            'prefix': [
                '`/prefix nuevo_prefijo:?`',
                '`!prefix ?`',
                '`!prefix` (para ver el prefijo actual)'
            ],
            'info': [
                '`/info`',
                '`!info`'
            ]
        };

        return examples[commandName] ? examples[commandName].join('\n') : null;
    },

    getCommandAdditionalInfo(commandName) {
        const info = {
            'rol': '‚Ä¢ Verifica que el usuario no tenga ya el rol\n‚Ä¢ Comprueba permisos del bot y usuario\n‚Ä¢ Previene asignaci√≥n de roles superiores al bot',
            'removerol': '‚Ä¢ Verifica que el usuario tenga el rol\n‚Ä¢ Comprueba permisos del bot y usuario\n‚Ä¢ Previene remoci√≥n de roles superiores al bot',
            'roles': '‚Ä¢ Muestra roles ordenados por jerarqu√≠a\n‚Ä¢ Incluye n√∫mero de miembros por rol\n‚Ä¢ Excluye roles gestionados por integraciones',
            'autorol': '‚Ä¢ Crea botones interactivos para autoasignaci√≥n\n‚Ä¢ M√°ximo 5 roles por panel\n‚Ä¢ Los usuarios pueden asignarse/removerse roles',
            'prefix': '‚Ä¢ Cambia el prefijo solo para este servidor\n‚Ä¢ M√°ximo 5 caracteres\n‚Ä¢ No puede contener espacios\n‚Ä¢ Se mantiene en memoria',
            'info': '‚Ä¢ Muestra informaci√≥n detallada del bot\n‚Ä¢ Incluye estad√≠sticas en tiempo real\n‚Ä¢ Muestra uptime del bot\n‚Ä¢ Informaci√≥n del desarrollador'
        };

        return info[commandName] || null;
    },

    // Comando legacy con prefijo din√°mico
    legacy: true,
    async executeLegacy(message, args) {
        const specificCommand = args[0];
        
        if (specificCommand) {
            await this.showCommandHelpLegacy(message, specificCommand);
        } else {
            await this.showAllCommandsLegacy(message);
        }
    },

    async showAllCommandsLegacy(message) {
        // Obtener el prefijo actual del servidor
        const prefixCommand = require('./prefix.js');
        const currentPrefix = prefixCommand.getPrefix(message.guild.id);

        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle('ü§ñ Comandos del Bot de Roles')
            .setDescription(`Aqu√≠ tienes todos los comandos disponibles. Prefijo actual: **${currentPrefix}**`)
            .setThumbnail(message.client.user.displayAvatarURL({ dynamic: true }))
            .setTimestamp()
            .setFooter({ text: `Usa ${currentPrefix}help <comando> para informaci√≥n detallada` });

        // Comandos de gesti√≥n de roles
        embed.addFields({
            name: 'üé≠ Gesti√≥n de Roles',
            value: [
                `\`${currentPrefix}rol @usuario RolEjemplo\` - Asigna un rol`,
                `\`${currentPrefix}removerol @usuario RolEjemplo\` - Remueve un rol`,
                `\`${currentPrefix}roles\` - Lista todos los roles`,
                `\`${currentPrefix}autorol "T√≠tulo" "Descripci√≥n" @rol1 @rol2\` - Panel autoasignaci√≥n`
            ].join('\n'),
            inline: false
        });

        // Comandos de utilidad
        embed.addFields({
            name: '‚öôÔ∏è Utilidad',
            value: [
                `\`${currentPrefix}help\` - Muestra esta lista`,
                `\`${currentPrefix}prefix [nuevo_prefijo]\` - Configura prefijo`,
                `\`${currentPrefix}info\` - Informaci√≥n del bot`,
                `\`${currentPrefix}help <comando>\` - Informaci√≥n detallada`
            ].join('\n'),
            inline: false
        });

        // Informaci√≥n adicional
        embed.addFields({
            name: '‚ÑπÔ∏è Informaci√≥n',
            value: [
                '‚Ä¢ Los comandos requieren permisos espec√≠ficos',
                '‚Ä¢ El sistema incluye verificaciones de seguridad',
                '‚Ä¢ Los paneles de autoasignaci√≥n usan botones interactivos',
                '‚Ä¢ El prefijo se puede personalizar por servidor'
            ].join('\n'),
            inline: false
        });

        await message.reply({ embeds: [embed] });
    },

    async showCommandHelpLegacy(message, commandName) {
        const command = message.client.commands.get(commandName);
        
        if (!command) {
            return await message.reply(`‚ùå No se encontr√≥ el comando \`${commandName}\`.`);
        }

        const prefixCommand = require('./prefix.js');
        const currentPrefix = prefixCommand.getPrefix(message.guild.id);

        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle(`üìñ Ayuda: ${currentPrefix}${commandName}`)
            .setTimestamp();

        // Informaci√≥n del comando
        if (command.data) {
            embed.setDescription(command.data.description || 'Sin descripci√≥n disponible.');
        }

        // Ejemplos de uso
        const examples = this.getCommandExamples(commandName);
        if (examples) {
            // Convertir ejemplos slash a legacy
            const legacyExamples = examples.replace(/\/[a-z]+/g, `${currentPrefix}${commandName}`);
            embed.addFields({
                name: 'üí° Ejemplos de Uso',
                value: legacyExamples,
                inline: false
            });
        }

        // Informaci√≥n adicional
        const additionalInfo = this.getCommandAdditionalInfo(commandName);
        if (additionalInfo) {
            embed.addFields({
                name: '‚ÑπÔ∏è Informaci√≥n Adicional',
                value: additionalInfo,
                inline: false
            });
        }

        await message.reply({ embeds: [embed] });
    }
}; 