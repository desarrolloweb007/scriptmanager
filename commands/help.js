const { EmbedBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');

// Utilidad para agrupar comandos por categor√≠a
function getCommandsByCategory() {
    return {
        'üé≠ Gesti√≥n de Roles': [
            '`/rol` - Asigna un rol a un usuario',
            '`/removerol` - Remueve un rol de un usuario',
            '`/roles` - Lista todos los roles disponibles',
            '`/autorol` - Crea panel de autoasignaci√≥n'
        ],
        'üõ°Ô∏è Moderaci√≥n': [
            '`/warn` - Advierte a un usuario',
            '`/warnings` - Muestra advertencias de un usuario',
            '`/mute` - Mutea a un usuario por tiempo',
            '`/unmute` - Desmutea a un usuario',
            '`/kick` - Expulsa a un usuario',
            '`/ban` - Banea a un usuario',
            '`/clear` - Borra mensajes del canal',
            '`/pclear` - Configura rol para clear',
            '`/settingsmod` - Configura canal de logs',
            '`/rolsettingsmod` - Configura permisos de comandos'
        ],
        'üîê Verificaci√≥n': [
            '`/verifymsg` - Crea mensaje de verificaci√≥n con reacciones',
            '`/pverify` - Configura permisos de verificaci√≥n',
            '`/listverify` - Lista mensajes de verificaci√≥n activos',
            '`/deleteverify` - Elimina mensaje de verificaci√≥n'
        ],
        'üé´ Sistema de Tickets': [
            '`!pticket <rol_id>` - Configura permisos de tickets',
            '`!ticketsetup #canal | mensaje | rolID_soporte` - Configura sistema',
            '`!ticketmsg T√≠tulo | Mensaje | Emoji` - Crea mensaje de tickets',
            '`/close` - Cierra un ticket (solo en canales de tickets)'
        ],
        'üö´ Sistema de Bloqueo': [
            '`!sgconfig <rol_id>` - Configura permisos de bloqueo',
            '`!sgblock <comando> <rol_id> <permitido>` - Bloquea comandos'
        ],
        'üõ°Ô∏è Moderaci√≥n Avanzada': [
            '`!addword palabra` - A√±ade palabra prohibida',
            '`!removeword palabra` - Elimina palabra prohibida',
            '`!listwords` - Lista palabras prohibidas',
            '`!autopunish tipo cantidad` - Configura castigo autom√°tico',
            '`!checkinfractions @usuario` - Verifica infracciones',
            '`!modperms <rol_id> <comando> <permitido>` - Permisos de moderaci√≥n',
            '`!warnfilter` - Activa/desactiva filtro de advertencias'
        ],
        '‚öôÔ∏è Utilidad': [
            '`/help` - Muestra esta lista de comandos',
            '`/prefix` - Configura el prefijo del bot',
            '`/info` - Informaci√≥n del bot ScriptManager',
            '`/help <comando>` - Informaci√≥n detallada de un comando'
        ],
        'üí∏ Econom√≠a': [
            '`!econconfig [nombre_moneda]` - Configura el nombre de la moneda',
            '`!setdaily cantidad` - Establece la recompensa diaria',
            '`!addcategory nombre | descripci√≥n` - Crea una categor√≠a de tienda',
            '`!additem nombre | categor√≠a | roleID (opcional) | precio | cantidad` - Agrega objeto a la tienda',
            '`!edititem nombre | campo | nuevo_valor` - Edita un objeto de la tienda',
            '`!removeitem nombre` - Elimina un objeto de la tienda',
            '`!shop [categor√≠a]` - Muestra la tienda',
            '`!buy nombre_objeto` - Compra un objeto',
            '`!balance [@usuario]` - Muestra el saldo',
            '`!daily` - Reclama recompensa diaria',
            '`!work` - Trabaja por monedas',
            '`!pay @usuario cantidad` - Transfiere monedas',
            '`!leaderboard` - Ranking de usuarios',
            '`!ptienda rolID` - Configura rol admin de tienda',
            '`!worktime set segundos` - Configura cooldown de work',
            '`!workpay min max` - Configura pago de work',
            '`!configword add nombre | descripci√≥n` - Agrega trabajo personalizado',
            '`!work add nombre | descripci√≥n` - Alias para agregar trabajo',
            '`!permseconomy rolID comando1,comando2,...` - Permisos de econom√≠a por rol'
        ],
        'üõ°Ô∏è Anti-Raid': [
            '`/antiraid activar` - Activa el sistema anti-raid',
            '`/antiraid desactivar` - Desactiva el sistema anti-raid',
            '`/antiraid estado` - Muestra la configuraci√≥n actual',
            '`/antiraid protecciones` - Estado de todos los m√≥dulos',
            '`/antiraid diagnostico` - Diagn√≥stico completo del sistema',
            '`/antiraid ayuda` - Explica cada m√≥dulo y c√≥mo configurarlo',
            '`/antiraid sensibilidad bajo/medio/alto` - Ajusta la sensibilidad',
            '`/antiraid config <opcion> <valor1> [valor2]` - Configura par√°metros (logchannel, raid-threshold, canalcreate-limit, delete-limit, auto-ban, perms, adminchannel, sensibilidad)',
            '`/antiraid whitelist add/remove/list @usuario/@rol` - Gestiona la whitelist',
            '`/antiraid blacklist add/remove/list @usuario/@rol` - Gestiona la blacklist',
            '`/antiraid whitelisttemp add/remove/list @usuario/@rol <minutos>` - Whitelist temporal',
            '`/antiraid excludechannel add/remove/list #canal` - Excluye canales del anti-raid',
            '`/antiraid alertmode on/off` - Solo alertas (sin ban/kick)',
            '`/antiraid panicmode on/off` - Bloqueo total de canales',
            '`/antiraid logs` - Historial de eventos anti-raid',
            '`/antiraid reset` - Restaura la configuraci√≥n',
            '`/antiraid setlang es/en` - Cambia el idioma',
            '`/antiraid setunban on/off [minutos]` - Desban autom√°tico',
            '`/antiraid setcooldown <segundos>` - Cooldown entre acciones',
            '`/antiraid mantenimiento on/off [minutos]` - Modo mantenimiento',
            '`/antiraid export` - Exporta la configuraci√≥n anti-raid',
            '`/antiraid import` - Importa una configuraci√≥n anti-raid',
            '',
            'üîí **Protecciones autom√°ticas:**',
            '- Detecci√≥n de raids (ingreso masivo, bots, cuentas nuevas)',
            '- Detecci√≥n de spam de menciones, flood, emojis, links sospechosos',
            '- Cambios masivos de roles, nick, permisos, configuraci√≥n del servidor',
            '- Eliminaci√≥n masiva de mensajes, creaci√≥n de webhooks sospechosos',
            '- Consulta a listas globales de usuarios/bots t√≥xicos',
            '- Modo p√°nico: bloqueo total del servidor',
            '- Auto-ajuste de umbrales, whitelist temporal, canales excluidos',
            '- Panel de resumen semanal, notificaciones de actualizaci√≥n',
            '',
            '`antiraid ...` (legacy, con prefix) disponible para todas las funciones principales'
        ],
        'üìù Comandos Legacy (con prefijo)': [
            '`!rol @usuario RolEjemplo` - Asigna rol',
            '`!removerol @usuario RolEjemplo` - Remueve rol',
            '`!roles` - Lista roles disponibles',
            '`!autorol "T√≠tulo" "Descripci√≥n" @rol1 @rol2` - Panel autoasignaci√≥n',
            '`!prefix [nuevo_prefijo]` - Configura prefijo',
            '`!help` - Muestra comandos',
            '`!info` - Informaci√≥n del bot',
            '`!warn @usuario raz√≥n` - Advierte usuario',
            '`!warnings @usuario` - Muestra advertencias',
            '`!mute @usuario duraci√≥n raz√≥n` - Mutea usuario',
            '`!unmute @usuario raz√≥n` - Desmutea usuario',
            '`!kick @usuario raz√≥n` - Expulsa usuario',
            '`!ban @usuario raz√≥n duraci√≥n` - Banea usuario',
            '`!clear [cantidad] [#canal]` - Borra mensajes',
            '`!pclear @rol` - Configura rol para clear',
            '`!verifymsg #canal | t√≠tulo | mensaje | rolID | emoji` - Crea verificaci√≥n',
            '`!pverify <rol_id>` - Configura permisos de verificaci√≥n',
            '`!listverify` - Lista mensajes de verificaci√≥n',
            '`!deleteverify <id>` - Elimina mensaje de verificaci√≥n',
            '`!pticket <rol_id>` - Configura permisos de tickets',
            '`!ticketsetup #canal | mensaje | rolID_soporte` - Configura sistema de tickets',
            '`!ticketmsg T√≠tulo | Mensaje | Emoji` - Crea mensaje de tickets',
            '`!close` - Cierra un ticket',
            '`!sgconfig <rol_id>` - Configura permisos de bloqueo',
            '`!sgblock <comando> <rol_id> <permitido>` - Bloquea comandos'
        ]
    };
}

// Utilidad para dividir texto en chunks de m√°ximo 1024 caracteres
function splitFields(arr) {
    const fields = [];
    let buffer = '';
    for (const line of arr) {
        if ((buffer + line + '\n').length > 1024) {
            fields.push(buffer);
            buffer = '';
        }
        buffer += line + '\n';
    }
    if (buffer) fields.push(buffer);
    return fields;
}

module.exports = {
    name: 'help',
    description: 'Muestra todos los comandos disponibles del bot',
    async execute(interaction) {
        try {
            const categories = getCommandsByCategory();
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('ü§ñ Comandos del Bot de Roles')
                .setDescription('Aqu√≠ tienes todos los comandos disponibles organizados por categor√≠as.')
                .setThumbnail(interaction.client.user.displayAvatarURL({ dynamic: true }))
                .setTimestamp()
                .setFooter({ text: 'Usa !help <comando> para informaci√≥n detallada' });

            for (const [cat, cmds] of Object.entries(categories)) {
                const fields = splitFields(cmds);
                fields.forEach((value, i) => {
                    embed.addFields({
                        name: fields.length > 1 ? `${cat} (${i+1})` : cat,
                        value: value.trim(),
                        inline: false
                    });
                });
            }

            embed.addFields({
                name: '‚ÑπÔ∏è Informaci√≥n',
                value: [
                    '‚Ä¢ Los comandos slash requieren permisos espec√≠ficos',
                    '‚Ä¢ Los comandos legacy funcionan con el prefijo configurado',
                    '‚Ä¢ El sistema de autoasignaci√≥n usa botones interactivos',
                    '‚Ä¢ Todos los comandos incluyen verificaciones de seguridad'
                ].join('\n'),
                inline: false
            });

            await interaction.reply({ embeds: [embed], flags: 64 });
        } catch (err) {
            const errorEmbed = new EmbedBuilder()
                .setColor('Red')
                .setTitle('‚ùå Error al mostrar la ayuda')
                .setDescription('Ocurri√≥ un error al generar la lista de comandos. Es posible que alg√∫n campo haya excedido el l√≠mite de Discord.')
                .addFields({
                    name: 'Detalles',
                    value: err.message || String(err),
                    inline: false
                })
                .setTimestamp();
            await interaction.reply({ embeds: [errorEmbed], flags: 64 });
        }
    },
    legacy: true,
    async executeLegacy(message, args) {
        try {
            const prefixCommand = require('./prefix.js');
            const currentPrefix = prefixCommand.getPrefix(message.guild.id);
            const categories = getCommandsByCategory();
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('ü§ñ Comandos del Bot de Roles')
                .setDescription('Aqu√≠ tienes todos los comandos disponibles organizados por categor√≠as.')
                .setTimestamp()
                .setFooter({ text: `Usa ${currentPrefix}help <comando> para informaci√≥n detallada` });

            for (const [cat, cmds] of Object.entries(categories)) {
                const fields = splitFields(cmds.map(cmd => cmd.replace(/!help/g, `${currentPrefix}help`).replace(/!prefix/g, `${currentPrefix}prefix`)));
                fields.forEach((value, i) => {
                    embed.addFields({
                        name: fields.length > 1 ? `${cat} (${i+1})` : cat,
                        value: value.trim(),
                        inline: false
                    });
                });
            }

            embed.addFields({
                name: '‚ÑπÔ∏è Informaci√≥n',
                value: [
                    '‚Ä¢ Los comandos slash requieren permisos espec√≠ficos',
                    '‚Ä¢ Los comandos legacy funcionan con el prefijo configurado',
                    '‚Ä¢ El sistema de autoasignaci√≥n usa botones interactivos',
                    '‚Ä¢ Todos los comandos incluyen verificaciones de seguridad'
                ].join('\n'),
                inline: false
            });

            await message.reply({ embeds: [embed], flags: 64 });
        } catch (err) {
            const errorEmbed = new EmbedBuilder()
                .setColor('Red')
                .setTitle('‚ùå Error al mostrar la ayuda')
                .setDescription('Ocurri√≥ un error al generar la lista de comandos.')
                .addFields({
                    name: 'Detalles',
                    value: err.message || String(err),
                    inline: false
                })
                .setTimestamp();
            await message.reply({ embeds: [errorEmbed], flags: 64 });
        }
    },
    async showCommandHelp(interaction, commandName) {
        const command = interaction.client.commands.get(commandName);
        if (!command) {
            const errorEmbed = new EmbedBuilder()
                .setColor('Red')
                .setTitle('‚ùå Comando no encontrado')
                .setDescription(`No se encontr√≥ el comando \`${commandName}\`.`);
            return await interaction.reply({ embeds: [errorEmbed], flags: 64 });
        }
        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle(`üìñ Ayuda: /${commandName}`);
        if (command.data) {
            embed.setDescription(command.data.description || 'Sin descripci√≥n disponible.');
            if (command.data.options && command.data.options.length > 0) {
                const options = command.data.options.map(option => {
                    const required = option.required ? ' (Requerido)' : ' (Opcional)';
                    return `‚Ä¢ \`${option.name}\` - ${option.description}${required}`;
                }).join('\n');
                if (options.length > 1024) {
                    // Dividir en varios campos si excede el l√≠mite
                    let start = 0;
                    let idx = 1;
                    while (start < options.length) {
                        embed.addFields({
                            name: `üîß Opciones (${idx})`,
                            value: options.slice(start, start+1024),
                            inline: false
                        });
                        start += 1024;
                        idx++;
                    }
                } else {
                    embed.addFields({
                        name: 'üîß Opciones',
                        value: options,
                        inline: false
                    });
                }
            }
            if (command.data.default_member_permissions) {
                embed.addFields({
                    name: 'üîê Permisos Requeridos',
                    value: 'Gestionar Roles',
                    inline: true
                });
            }
        }
        const examples = this.getCommandExamples(commandName);
        if (examples) {
            embed.addFields({
                name: 'üí° Ejemplos de Uso',
                value: examples.length > 1024 ? examples.slice(0, 1024) : examples,
                inline: false
            });
        }
        const additionalInfo = this.getCommandAdditionalInfo(commandName);
        if (additionalInfo) {
            embed.addFields({
                name: '‚ÑπÔ∏è Informaci√≥n Adicional',
                value: additionalInfo.length > 1024 ? additionalInfo.slice(0, 1024) : additionalInfo,
                inline: false
            });
        }
        await interaction.reply({ embeds: [embed], flags: 64 });
    },
    getCommandExamples(commandName) {
        const command = interaction.client.commands.get(commandName);
        if (!command) return null;
        return command.examples || null;
    },
    getCommandAdditionalInfo(commandName) {
        const command = interaction.client.commands.get(commandName);
        if (!command) return null;
        return command.additionalInfo || null;
    }
}; 