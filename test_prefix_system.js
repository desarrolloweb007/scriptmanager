/**
 * Archivo de prueba para el sistema de prefijos personalizados
 * Este archivo puede ejecutarse independientemente para verificar el funcionamiento
 */

const prefixManager = require('./utils/prefixManager');

console.log('üß™ Iniciando pruebas del sistema de prefijos...\n');

// Funci√≥n para mostrar resultados de pruebas
function testResult(testName, passed, details = '') {
    const status = passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${testName}`);
    if (details) console.log(`   ${details}`);
    console.log('');
}

// Test 1: Verificar funciones b√°sicas
console.log('üìã Test 1: Funciones b√°sicas');
testResult(
    'getPrefix con guildId v√°lido',
    prefixManager.getPrefix('123456789') === '!',
    'Prefijo por defecto devuelto correctamente'
);

testResult(
    'setPrefix con prefijo v√°lido',
    prefixManager.setPrefix('123456789', '?') === true,
    'Prefijo configurado exitosamente'
);

testResult(
    'getPrefix despu√©s de setPrefix',
    prefixManager.getPrefix('123456789') === '?',
    'Prefijo personalizado recuperado correctamente'
);

// Test 2: Validaci√≥n de prefijos
console.log('üìã Test 2: Validaci√≥n de prefijos');
testResult(
    'Prefijo v√°lido (?)',
    prefixManager.isValidPrefix('?') === true,
    'Prefijo v√°lido aceptado'
);

testResult(
    'Prefijo v√°lido ($)',
    prefixManager.isValidPrefix('$') === true,
    'Prefijo v√°lido aceptado'
);

testResult(
    'Prefijo v√°lido (bot)',
    prefixManager.isValidPrefix('bot') === true,
    'Prefijo v√°lido aceptado'
);

testResult(
    'Prefijo inv√°lido (muy largo)',
    prefixManager.isValidPrefix('muylargo') === false,
    'Prefijo demasiado largo rechazado'
);

testResult(
    'Prefijo inv√°lido (con espacios)',
    prefixManager.isValidPrefix('pre fijo') === false,
    'Prefijo con espacios rechazado'
);

testResult(
    'Prefijo inv√°lido (vac√≠o)',
    prefixManager.isValidPrefix('') === false,
    'Prefijo vac√≠o rechazado'
);

// Test 3: Funciones de gesti√≥n
console.log('üìã Test 3: Funciones de gesti√≥n');
testResult(
    'resetPrefix',
    prefixManager.resetPrefix('123456789') === true,
    'Prefijo reseteado correctamente'
);

testResult(
    'getPrefix despu√©s de reset',
    prefixManager.getPrefix('123456789') === '!',
    'Prefijo por defecto restaurado'
);

testResult(
    'getAllPrefixes',
    typeof prefixManager.getAllPrefixes() === 'object',
    'Funci√≥n getAllPrefixes funciona correctamente'
);

// Test 4: Manejo de errores
console.log('üìã Test 4: Manejo de errores');
testResult(
    'setPrefix con guildId nulo',
    prefixManager.setPrefix(null, '?') === false,
    'Error manejado correctamente'
);

testResult(
    'setPrefix con prefijo nulo',
    prefixManager.setPrefix('123456789', null) === false,
    'Error manejado correctamente'
);

testResult(
    'getPrefix con guildId nulo',
    prefixManager.getPrefix(null) === '!',
    'Prefijo por defecto devuelto para guildId nulo'
);

// Test 5: Constantes del sistema
console.log('üìã Test 5: Constantes del sistema');
testResult(
    'DEFAULT_PREFIX es !',
    prefixManager.DEFAULT_PREFIX === '!',
    'Prefijo por defecto configurado correctamente'
);

testResult(
    'MAX_PREFIX_LENGTH es 5',
    prefixManager.MAX_PREFIX_LENGTH === 5,
    'Longitud m√°xima configurada correctamente'
);

// Limpieza final
console.log('üßπ Limpieza final...');
prefixManager.resetPrefix('123456789');

console.log('\nüéâ Todas las pruebas completadas!');
console.log('üìä Resumen:');
console.log('‚Ä¢ Sistema de prefijos funcionando correctamente');
console.log('‚Ä¢ Validaciones implementadas');
console.log('‚Ä¢ Manejo de errores robusto');
console.log('‚Ä¢ Funciones de gesti√≥n completas');
console.log('\n‚úÖ El sistema est√° listo para producci√≥n!'); 